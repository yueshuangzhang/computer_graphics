// Hint: Crib from your model_view_projection.vs
// Layout:
//                                         Indicate that we're dealing with
//                                         triangles in CCW order and using a
//                                         sane spacing.
layout(triangles, equal_spacing, ccw) in;
// Uniforms
uniform mat4 view;
uniform mat4 proj;
uniform float animation_seconds;
uniform bool is_moon;
// Inputs:
//                    array of 3 3D patch corner positions
in vec4 pos_es_in[];
// Outputs:
//                   projected, view, and model transformed 3D position
out vec4 pos_fs_in;
//                        view and model transformed 3D position
out vec4 view_pos_fs_in;
//                      view and model transformed 3D normal
out vec3 normal_fs_in;
//                      3D position _before_ applying model, view or projection
//                      transformations (e.g., point on unit sphere)
out vec3 sphere_fs_in;
// expects: interpolat, model, 
void main()
{
  /////////////////////////////////////////////////////////////////////////////
  // Replace with your code 

  vec4 interpolated_result = vec4(normalize(interpolate(gl_TessCoord, pos_es_in[0].xyz, pos_es_in[1].xyz, pos_es_in[2].xyz)), 1.0);
  
  // out vec4 pos_fs_in;
  // out vec4 view_pos_fs_in;

  if (is_moon){
    float angle = 0.5 * M_PI * animation_seconds;
    vec4 shift = vec4(2 * sin(angle), 0, 2 * cos(angle), 0);
    // shrink the model by 70%,
    pos_fs_in = proj * view * (model(is_moon, animation_seconds) * uniform_scale(1 - 0.7) * interpolated_result + shift);
    view_pos_fs_in = view * (model(is_moon, animation_seconds) * interpolated_result + shift);
  }
  else{
    pos_fs_in = proj * view * model(is_moon, animation_seconds) * interpolated_result;
    view_pos_fs_in = view * model(is_moon, animation_seconds) * interpolated_result;
  }


  // out vec3 normal_fs_in;
  // out vec3 sphere_fs_in;
  mat4 model_view = view * model(is_moon, animation_seconds);

  normal_fs_in = (transpose(model_view) * interpolated_result).xyz;
  sphere_fs_in = interpolated_result.xyz;
  
  gl_Position = pos_fs_in;
  /////////////////////////////////////////////////////////////////////////////
}
